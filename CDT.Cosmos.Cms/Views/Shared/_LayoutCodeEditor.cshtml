@addTagHelper *, Kendo.Mvc
@using CDT.Cosmos.Cms.Services
@using Kendo.Mvc.UI
@using Newtonsoft.Json
@using System.Reflection
@model CDT.Cosmos.Cms.Models.Interfaces.ICodeEditorViewModel
@{
    var buttons = Model.CustomButtons.ToArray();
    var fields = Model.EditorFields.ToArray();
    var assem = Assembly.GetExecutingAssembly();
    var assemblyName = assem.GetName();
    var assemblies = assem.GetReferencedAssemblies();
    var kendo = assemblies.FirstOrDefault(a => a.Name.Contains("kendo", StringComparison.CurrentCultureIgnoreCase));
    var kendoVersion = $"{kendo.Version.Major}.{kendo.Version.Minor}.{kendo.Version.Build}";

    // Team member information (only applies to users who are team members)
    var teamMemberLogic = (TeamIdentityLogic)ViewData["TeamLogic"];
    var teamName = (string)ViewData["TeamName"];

    var isArticleEditor = Model.GetType() == typeof(EditCodePostModel);

    // Used for ChatBot
    var userName = Context.User.Identity.Name;

    // Permissions configuration
    var isAuthor = false;
    var isTeamMember = teamMemberLogic != null;
    if (User != null && (User.IsInRole("Authors") || teamMemberLogic?.IsInRole(TeamRoleEnum.Author, teamName) == true))
    {
        isAuthor = true;
    }
    else if (User != null && User.IsInRole("Editors") || teamMemberLogic?.IsInRole(TeamRoleEnum.Editor, teamName) == true)
    {
        isAuthor = false;
    }
    else if (User != null && User.IsInRole("Administrators"))
    {
        isAuthor = false;
    }
}
<!DOCTYPE html>
<html>
<head lang="en">
    <meta name="viewport" content="width=device-width" />
    <title>@ViewData["Title"]</title>

    <link rel="stylesheet" href="~/lib/mdb-ui-kit/mdb.min.css" />

    <partial name="_KendoHeadPartial" />
    <script src="~/js/CosmosTimeZone.js"></script>

    <style>
        /* Sticky footer styles                                                                                                                    -------------------------------------------------- */
        html editor {
            min-height: 100%;
            position: relative;
        }

        body {
            background-color: #535252;
            color: white;
        }

        .pageTabIcon {
            color: orangered;
            font-size: 0.9em;
        }
    </style>
    <script src="https://unpkg.com/emmet-monaco-es/dist/emmet-monaco.min.js"></script>
    @*Application Insights - Client side*@
    @Html.Raw(JavaScriptSnippet.FullScript)
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark">
        <div class="container-fluid">
            @(Html.Kendo().ToolBar().Name("tbar")
            .HtmlAttributes(new {style = "border: 0px;background-color:inherit;height:38px;"})
            .Items(item =>
            {
            item.Add().Text("Code Editor").Type(CommandType.SplitButton)
            .MenuButtons(btn =>
            {
            btn.Add().Text("Save");
            btn.Add().Text("Close");
            btn.Add().Text("Files");
            foreach (var button in buttons)
            {
            btn.Add().Text(button);
            }
            }).Click("btnMainClick");

            item.Add().Type(CommandType.Button).Text("Ready to Edit").Id("ccms-edit-lock-btn").Click("ccmsEditButtonOnClick"); // ccmsEditButtonOnClick found on _ChatComponentPartial
            item.Add().Template("<div><span id='versInfo' style='margin-right:10px;font-size:0.6em;'>" + @assemblyName.Version + "</span> </div>");
            
            if (isArticleEditor)
            {
                item.Add().Type(CommandType.Button).Text("<span id='btnPublish'></span>").Click("openSchedulerDialog").Hidden(isAuthor);
                item.Add().Template("<span>Title: </span>");
                item.Add().Template(Html.Kendo().TextBox().Name("tbTitle").Value(((EditCodePostModel) Model).Title).HtmlAttributes(new {style = "width: 32vw;"}).ToHtmlString());
            }
            item.Add().Text("Help").Type(CommandType.SplitButton)
            .MenuButtons(btn =>
            {
            btn.Add().Text("Basic Editing");
            btn.Add().Text("Code Navigation");
            btn.Add().Text("Reformatting Code");
            btn.Add().Text("About Monaco");
            }).Click("btnHelpClick");
                        @*item.Add().Type(CommandType.Separator);
                    item.Add().Template(@"<div><strong>Editing:</strong> " + Model.EditorTitle + "</div>");*@
                        @*item.Add().Template(@"<div><strong>Version:</strong> " + ViewData["Version"] + "</div>");
                    item.Add().Template("<span title=\"Edit sessions\" id=\"pubLbl\">Session info: </span><span id=\"articleChat\"></span>");*@
            })
            )
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse"
                    data-bs-target="#navBarTabs"
                    aria-controls="navBarTabs"
                    aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navBarTabs">
                <span id="msgBox"></span>
                <ul id="editorTabs" class="navbar-nav">
                    @{
                        var aclass = "active";
                        foreach (var field in fields)
                        {
                                    <li class="nav-item">
                                        <a title="@field.ToolTip" data-bs-toggle="tooltip" data-bs-placement="bottom" data-ccms-fieldname="@field.FieldName" class="tabitem nav-link @aclass" aria-current="page" onclick="tabOnSelect(this)"><span class="pageTabIcon">&lt;&gt;</span>  @field.FieldName</a>
                                    </li>
                            aclass = "";
                        }
                    }
                </ul>
                <div class="form"></div>
            </div>
           
            @* This button is required to by the Chat Component *@
            <partial name="_ChatButtonPartial" />
        </div>
    </nav>
    <div id="horizontal">
        <div id="left-pane">
            <div class="pane-content">
            </div>
        </div>
        <div id="right-pane">
            <div class="pane-content">
                <div id="editspace" class="editor" style="height:600px;width:100%"></div>
            </div>
        </div>
    </div>
    @RenderBody()

    <kendo-dialog name="closeEditorDialog" title="Edit Code" modal="true" visible="false" min-width="500">
        <content>
            <p>You are about to leave this page.</p>
            <h5> Any unsaved changes will be lost!</h5>
            <p>To save, click cancel and then the save button.</p>
        </content>
        <actions>
            <action text="Cancel">
            </action>
            <action action="closeEditor" primary="true" text="Yes" title="Confirm">
            </action>
        </actions>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="modelStateMsg" title="Save Error" modal="true" visible="@ViewData.ModelState.IsValid == false" min-width="600">
        <content>
            <div class="bg-secondary text-light">
                <h4>
                    <span class="badge badge-warning">WARNING!</span>
                </h4>
                <p>Could not save because of the following error(s):</p>
                <ul>
                    @{
                        var keys = ViewData.ModelState.Keys.ToList();
                        var values = ViewData.ModelState.Values.ToList();
                        for (var i = 0; i < ViewData.ModelState.Keys.Count(); i++)
                        {
                            var errors = values[i].Errors.ToList();
                            if (errors.Count > 0)
                            {
                                        <li>
                                            @keys[i] :
                                            <ul>
                                                @{
                                            for (var c = 0; c < errors.Count; c++)
                                            {
                                                                <li>
                                                                    @errors[c].ErrorMessage
                                                                    @if (errors[c].Exception != null)
                                                    {
                                                                        <br />
                                                                        <br />
                                                                        <button class="btn btn-sm btn-dark" onclick="onClickShowError('@("#exception" + i + c)')">View Details</button>
                                                                        <div @("id=\"exception" + i + c + "\"") style="display: none">
                                                                            <div style="display: block; font-family: Courier New;">
                                                                                @errors[c].Exception.Message
                                                                            </div>
                                                                            <code>
                                                                                @errors[c].Exception.InnerException
                                                                            </code>
                                                                        </div>
                                                    }
                                                                </li>
                                            }
                                                }
                                            </ul>
                                        </li>
                            }
                        }
                    }
                </ul>
            </div>
        </content>
        <actions>
            <action text="Ok">
            </action>
        </actions>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="saveErrorsDialog" title="Errors Log" modal="true" visible="false" min-width="800" min-height="800">
        <content>
            <div class="bg-dark text-light" id="divErrorLog">
            </div>
        </content>
        <actions>
            <action text="Close">
            </action>
        </actions>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="saveChangesDialog" title="Please Wait" modal="true" visible="false" min-width="500">
        <content>
            <div>
                <p>Saving changes...</p>
            </div>
        </content>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="changesSavedDialog" title="Changes Saved" modal="true" visible="false" min-width="700">
        <content>
            <div>
                <p>Your changes have been successfully saved.</p>
            </div>
        </content>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
    </kendo-dialog>
    <kendo-dialog name="schedulingDialog" title="Publishing Date" modal="true" visible="false" min-width="700">
        <content>
            <h4><span class="fa fa-calendar"></span> Publishing Date/Time</h4>
            <hr />
            <p></p>
            <p>Set the day and time when this page will be made visible on the web.</p>
            <p>Tips:</p>
            <ul>
                <li>Pick now or a date/time in the past to publish right away.</li>
                <li>Pick a date/time later on to schedule publishing in the future.</li>
                <li>
                    Removing or clearing out the date/time will &quot;un-publish&quot; this version.
                    <ul>
                        <li>If no prior version exists, this page will not appear on the web.</li>
                        <li>Otherwise, the prior <em>published</em> version will appear instead.</li>
                    </ul>
                </li>
            </ul>
            <div class="row">
                <div class="col-6">
                    @(Html.Kendo().DateTimePicker().Name("dtPublished").Enable(User.IsInRole("Editors") || User.IsInRole("Administrators")))
                </div>
                <div class="col-4">
                    @Html.Kendo().Button().Name("btnPublishNow").Content("Publish Now").Events(eve => eve.Click("onPubNow"))
                </div>
            </div>
            <div class="col">
                @Html.Kendo().Button().Name("timeZone")
            </div>
            <p></p>
            <div class="form-row">
                <div class="col">
                    <div class="k-button k-button-sm k-button-primary" onclick="cancelPublish()">Clear Date/Time</div>
                </div>
            </div>
            <p></p>
            <p><span class="badge badge-warning">Note: </span> This will immediately set permissions for all versions of this page.</p>
        </content>
        <popup-animation>
            <open duration="500" effects="fade:in" />
            <close duration="500" effects="fade:out" />
        </popup-animation>
        <actions>
            <action action="cancelPublishDateTime" text="Cancel">
            </action>
            <action action="savePublishDateTime" text="Set Date/Time" title="Save Date/Time">
            </action>
        </actions>
    </kendo-dialog>
    
    <partial name="_ChatComponentsPartial" />
    <script>
        var editor;
        var fieldId;
        var fileMgrPopup = null;
        var selectedFile = "";

        // Example: var editFields = '[{"FieldId":"HeaderJavaScript","FieldName":"Header JavaScript","EditorMode":0},{"FieldId":"Content","FieldName":"Html Content","EditorMode":1},{"FieldId":"FooterJavaScript","FieldName":"Footer JavaScript","EditorMode":0}]';
        var editFields = @(Html.Raw(JsonConvert.SerializeObject(Model.EditorFields)));

        function tabOnSelect(element) {
            //alert("Selected: " + $(e.item).find("> .k-link").text());
            //loadEditor($(e.item).find("> .k-link").text());
            var name = $(element).attr("data-ccms-fieldname");
            $(".tabitem").removeClass("active");
            $(element).addClass("active");
            saveExistingLoadNewEditor(name);
        }

        function saveExistingLoadNewEditor(id) {
            if (editor !== null && typeof editor !== "undefined") {
                $("#" + fieldId).val(editor.getValue());
            }
            createAndLoadEditor(id);
        }
        
        function cancelPublishDateTime() {
            loadPublishLocalDateTime();
            $("#schedulingDialog").data("kendoDialog").close();
        };

        //
        // Creates and loads a Monaco Editor.
        //
        function createAndLoadEditor(id) {
            if (editor !== null && typeof editor !== "undefined") {
                if (editor.getModel()) {
                    editor.getModel().dispose();
                }
                $("#msgBox").html("Loading...");
                editor.dispose();
                editor = null;
            }

            fieldId = null;

            $("#EditingField").val(null);

            // Monaco AMD Editor  - https://microsoft.github.io/monaco-editor/
            require.config({ paths: { 'vs': '/lib/monaco-editor/min/vs' } });

            //require.config({ paths: { vs: '/lib/node_modules/monaco-editor/dist' } }); // Emmet Abbr.
            require(['vs/editor/editor.main'],
                function() {
                    fieldId = id;
                    var fieldInfo = editFields.find(o => o.FieldName === id);
                    fieldId = fieldInfo.FieldId;

                    var mode = null;

                    switch(fieldInfo.EditorMode)
                    {
                        case 0:
                            mode = "javascript"
                            break;
                        case 1:
                            mode = "html"
                            break;
                        case 2:
                            mode = "css";
                            break;
                        default:
                            mode = "html"
                            break;
                    }

                    $("#EditingField").val(fieldId);
                    var hiddenInput = $("#" + fieldId);
                    var code = hiddenInput.val();
                    emmetMonaco.emmetHTML(monaco);
                    editor = monaco.editor.create(document.getElementById('editspace'),
                        {
                            language: mode,
                            theme: "vs-dark",
                            value: code
                        });
                    editor.onDidFocusEditorWidget(function () {
                        if (ccmsEditorIsLocked !== true) {
                          ccmsSendSignal("SetArticleLock");
                        } else {
                            event.preventDefault();
                            alert("Cannot edit while locked by another user.");
                        }
                    });
                    $("#msgBox").html("");
                });
        }

        $("#codeForm").submit(function(e) {
            e.preventDefault(); // Prevent the form from doing a post back.
            $("#saveChangesDialog").data("kendoDialog").open();

            if (@isArticleEditor.ToString().ToLower()) {

                // Saving publish date with time zone information
                savePublishDateTime();
                // Save title
                $("#Title").val($("#tbTitle").val());

            }
            
            if (editor) {
                $("#" + fieldId).val(editor.getValue());
            }
            //return true;
            var form = $('#codeForm');
            var action = form.attr('action');

            $.post(action,
                form.serialize(),
                function(response) {
                    $("#saveChangesDialog").data("kendoDialog").close();
                    if (response.IsValid) {
                        ccmsSendSignal("ArticleSaved"); // Defined in the chat components partial
                        $("#changesSavedDialog").data("kendoDialog").open();
                        setTimeout(function() {
                                $("#changesSavedDialog").data("kendoDialog").close();
                            },
                            1000);
                    } else {
                        var errorMsg = "<h5>Error(s) detected while saving:</h5>";
                        // Invalid response.
                        $.each(response.Errors,
                            function(index, error) {
                                errorMsg = "<p>" + error.Key + "</p><ul>";
                                $.each(error.Errors,
                                    function(index, innerError) {
                                        errorMsg = errorMsg + "<li>" + innerError.ErrorMessage + "</li>";
                                    });
                                errorMsg = errorMsg + "</ul>";
                            });
                        $("#divErrorLog").html(errorMsg);
                        $("#saveErrorsDialog").data("kendoDialog").open();
                    }
                }
            );
        });

        function btnSelectField(e) {
            fieldName = e.target.text();
            saveExistingLoadNewEditor(e.id);
        }

        function btnMainClick(e) {
            switch (e.target.text()) {
            //switch (e) {
            case "Save":
                if (ccmsEditorIsLocked === true) {
                    alert("Cannot save while locked by another user.");
                    return;
                }
                $("#codeForm").submit();
                break;
            case "Close":
                $("#closeEditorDialog").data("kendoDialog").open();
                break;
            case "Files":
                if (fileMgrPopup === null) {
                    fileMgrPopup = window.open('@Url.Action("Popup", "FileManager")', '_blank', 'height=510,width=900,menubar=no,location=no,status=no,titlebar=no,toolbar=no');
                }
                else {
                    fileMgrPopup.focus();
                }
                break;
            default:
                if (typeof btnCustomClick === "function") {
                    btnCustomClick(e);
                }
                break;
            }
        }

        function btnHelpClick(e) {
            switch (e.target.text()) {
            case "Basic Editing":
                window.open("https://code.visualstudio.com/docs/editor/codebasics", "_blank");
                break;
            case "Code Navigation":
                window.open("https://code.visualstudio.com/docs/editor/editingevolved", "_blank");
                break;
            case "Reformatting Code":
                window.open("https://code.visualstudio.com/docs/editor/refactoring", "_blank");
                break;
            case "About Monaco":
                window.open("https://microsoft.github.io/monaco-editor/index.html", "_blank");
                break;
            }
        }

        function onClickShowError(id) {
            $("#exceptionDetails").html($(id).html());
            $("#codeErrorDialog").data("kendoDialog").open();
        }

        function onClickShowError(id) {
            $("#exceptionDetails").html($(id).html());
            $("#editCodeDialog").data("kendoDialog").open();
        }

        $(document).ready(function() {
            var fieldId = "@Model.EditingField";
            if (fieldId !== "") {
                var fieldInfo = editFields.find(o => o.FieldId === fieldId);
                createAndLoadEditor(fieldInfo.FieldName);
                // Refresh locks for everyone including self.
                setTimeout(function () {
                    ccmsSendSignal("NotifyRoomOfLock"); 
                }, 2000);
            }
            loadPublishLocalDateTime();
        });

        $(window).bind('keydown', function(event) {
                if (event.ctrlKey || event.metaKey) {
                    switch (String.fromCharCode(event.which).toLowerCase()) {
                    case 's':
                        event.preventDefault();
                        $("#codeForm").submit();
                        break;
                    }
                }
        });

        $(window).on("unload", function() {
           if (fileMgrPopup !== null) {
               fileMgrPopup.close();
           }
        });

        function onPubNow(e) {
            var now = new Date();
            now = now.toUTCString();
            $("#Published").val(now);
            loadPublishLocalDateTime();
        }
        
        // SCHEDULING PUBLISHING UTILITIES      
        function openSchedulerDialog() {
            $("#schedulingDialog").data("kendoDialog").open();
        }

        function loadPublishLocalDateTime() {
            if (!@isArticleEditor.ToString().ToLower()) {
                return;
            }
            var published = $("#Published").val();
            var publishButton = $("#btnPublish");
            if (published !== null && typeof (published) !== "undefined" && published.trim() !== "") {

                if (!published.endsWith("Z") && !published.endsWith("GMT")) {
                    published += " GMT";
                }

                var localDateTime = new Date(published);
                var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
                dateTimePicker.value(localDateTime);
                var now = new Date();

                if (now < localDateTime) {
                    //publishButton.attr("class", "k-button k-primary");
                    publishButton.html("Pending");
                    $(publishButton).kendoTooltip({
                        content: "This version is set to be published in the future at: " + localDateTime.toLocaleString() + ". Click to change."
                    });
                } else {
                    //publishButton.attr("class", "k-button k-success");
                    publishButton.html("Published");
                    $(publishButton).kendoTooltip({
                        content: "This version is now published and available on the web as of: " + localDateTime.toLocaleString() + ". Click to change."
                    });
                }
            } else {
                //publishButton.attr("class", "k-button k-alert");
                publishButton.html("DRAFT");
                $(publishButton).kendoTooltip({
                    content: "This version is not yet published. Click to schedule publishing date and time."
                });
            }
        }

        function savePublishDateTime() {
            // Save date/time
            var dateTimePicker = $("#dtPublished").data("kendoDateTimePicker");
            var dateTimeValue = dateTimePicker.value();

            if ($("#Published").val() !== dateTimeValue) {
                $("#pendingChangesBadge").show();
            }

            // Note, this saves the date/time using local time (of the user's computer).
            // The server stores this as UTC time.
            if (dateTimeValue !== null && dateTimeValue !== "null" && dateTimeValue !== "") {
                var datetime = new Date(dateTimeValue);
                var utcString = datetime.toUTCString();
                $("#Published").val(utcString);
                $("#btnPublish").html("Published");
            } else {
                $("#btnPublish").html("DRAFT");
                $("#Published").val("");
            }
        }


    </script>
    <script src="/lib/monaco-editor/min/vs/loader.js"></script>

    <script src="~/lib/mdb-ui-kit/mdb.min.js"></script>
   
    <form id="frmLogout" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new {area = ""})">
        <button type="submit" class="nav-link btn btn-link text-dark">Logout</button>
    </form>
</body>
</html>